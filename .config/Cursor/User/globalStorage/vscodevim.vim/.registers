{"version":"1.0","registers":[["%",[{"text":"domain/src/repositories/user_repository.rs","registerMode":0}]],["#",[{"text":"domain/src/repositories/register_repository.rs","registerMode":0}]],[".",[{"text":{"commandList":["<Esc>"],"actionKeys":[],"waitingForAnotherActionKey":false,"actionsRun":[{"name":"","isJump":false,"createsUndoPoint":false,"preservesDesiredColumn":false,"keysPressed":["o"],"actionType":"command","isCompleteAction":true,"runsOnceForEachCountPrefix":false,"modes":[0],"keys":["o"]},{"name":"","isJump":false,"createsUndoPoint":false,"preservesDesiredColumn":false,"keysPressed":["\n"],"actionType":"command","isCompleteAction":true,"runsOnceForEachCountPrefix":false,"modes":[],"keys":[],"contentChanges":[{"range":[{"line":12,"character":0},{"line":12,"character":0}],"rangeOffset":451,"rangeLength":0,"text":"\n"}],"cursorStart":{"line":12,"character":0},"cursorEnd":{"line":13,"character":0}},{"name":"","isJump":false,"createsUndoPoint":false,"preservesDesiredColumn":false,"keysPressed":["<Esc>"],"actionType":"command","isCompleteAction":true,"runsOnceForEachCountPrefix":false,"modes":[1],"keys":[["<Esc>"],["<C-c>"],["<C-[>"]]}],"actionsRunPressedKeys":["o","\n","<Esc>"],"bufferedKeys":[],"allowPotentialRemapOnFirstKey":true,"hasRunOperator":false,"isInsertion":true,"transformer":{"transformations":[]},"count":0,"operatorCount":0,"registerKey":"","registerName":"*"},"registerMode":0}]],["/",[{"text":"comis","registerMode":0}]],["\"",[{"registerMode":1,"text":"    sqlx::query(\n        \"CREATE TABLE IF NOT EXISTS comissions(\n        id SERIAL PRIMARY KEY,\n        comission_entry_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        comission_exit_date TIMESTAMP,\n        comission_status_date TIMESTAMP,\n        comission_brigade VARCHAR(255) NOT NULL REFERENCES brigada(Nombre),\n        comission_observations TEXT,\n        comission_authorized_official_id INTEGER REFERENCES official(id),\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n    )\",\n    )\n    .execute(pool)\n    .await?;\n\n    sqlx::query(\n        \"\n    CREATE TABLE IF NOT EXISTS transport(\n        id SERIAL PRIMARY KEY,\n        transport_type VARCHAR(255) NOT NULL,\n        transport_details VARCHAR(255) NOT NULL,\n        transport_brand VARCHAR(255) NOT NULL,\n        transport_model VARCHAR(255) NOT NULL,\n        transport_plate VARCHAR(255) NOT NULL,\n        transport_unit VARCHAR(255) NOT NULL,\n        transport_status VARCHAR(255)\n    )\",\n    )\n    .execute(pool)\n    .await?;\n\n    sqlx::query(\n        \"\n    CREATE TABLE IF NOT EXISTS comission_transport(\n        id SERIAL PRIMARY KEY,\n        comission_id INTEGER NOT NULL REFERENCES comissions(id),\n        transport_id INTEGER NOT NULL REFERENCES transport(id)\n    )\",\n    )\n    .execute(pool)\n    .await?;\n\n    sqlx::query(\n        \"CREATE TABLE IF NOT EXISTS comission_officials(\n        id SERIAL PRIMARY KEY,\n        comission_id INTEGER NOT NULL REFERENCES comissions(id),\n        official_id INTEGER NOT NULL REFERENCES official(id),\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n    )\",\n    )\n    .execute(pool)\n    .await?;\n\n    sqlx::query(\n        \"CREATE TABLE IF NOT EXISTS comission_reasons(\n        id SERIAL PRIMARY KEY,\n        comission_id INTEGER NOT NULL REFERENCES comissions(id),\n        comission_reason_name VARCHAR(255) NOT NULL,\n        comission_reason_description TEXT NOT NULL,\n        comission_reason_zone VARCHAR(255) NOT NULL,\n        comission_reason_municipality VARCHAR(255) NOT NULL,\n        comission_reason_state VARCHAR(255) NOT NULL\n    )\",\n    )\n    .execute(pool)\n    .await?;\n\n    sqlx::query(\n        \"CREATE TABLE IF NOT EXISTS comission_exit(\n        id SERIAL PRIMARY KEY,\n        comission_id INTEGER NOT NULL REFERENCES comissions(id),\n        comission_exit_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        comission_observations TEXT\n    )\",\n    )\n    .execute(pool)\n    .await?;"}]],["1",[{"text":"import { Module } from \"@/constants/modules\";\nimport { changeDatabasePool } from \"@/services/database.service\";","registerMode":1}]],["0",[{"text":"    sqlx::query(\n        \"CREATE TABLE IF NOT EXISTS comissions(\n        id SERIAL PRIMARY KEY,\n        comission_entry_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        comission_exit_date TIMESTAMP,\n        comission_status_date TIMESTAMP,\n        comission_brigade VARCHAR(255) NOT NULL REFERENCES brigada(Nombre),\n        comission_observations TEXT,\n        comission_authorized_official_id INTEGER REFERENCES official(id),\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n    )\",\n    )\n    .execute(pool)\n    .await?;\n\n    sqlx::query(\n        \"\n    CREATE TABLE IF NOT EXISTS transport(\n        id SERIAL PRIMARY KEY,\n        transport_type VARCHAR(255) NOT NULL,\n        transport_details VARCHAR(255) NOT NULL,\n        transport_brand VARCHAR(255) NOT NULL,\n        transport_model VARCHAR(255) NOT NULL,\n        transport_plate VARCHAR(255) NOT NULL,\n        transport_unit VARCHAR(255) NOT NULL,\n        transport_status VARCHAR(255)\n    )\",\n    )\n    .execute(pool)\n    .await?;\n\n    sqlx::query(\n        \"\n    CREATE TABLE IF NOT EXISTS comission_transport(\n        id SERIAL PRIMARY KEY,\n        comission_id INTEGER NOT NULL REFERENCES comissions(id),\n        transport_id INTEGER NOT NULL REFERENCES transport(id)\n    )\",\n    )\n    .execute(pool)\n    .await?;\n\n    sqlx::query(\n        \"CREATE TABLE IF NOT EXISTS comission_officials(\n        id SERIAL PRIMARY KEY,\n        comission_id INTEGER NOT NULL REFERENCES comissions(id),\n        official_id INTEGER NOT NULL REFERENCES official(id),\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n    )\",\n    )\n    .execute(pool)\n    .await?;\n\n    sqlx::query(\n        \"CREATE TABLE IF NOT EXISTS comission_reasons(\n        id SERIAL PRIMARY KEY,\n        comission_id INTEGER NOT NULL REFERENCES comissions(id),\n        comission_reason_name VARCHAR(255) NOT NULL,\n        comission_reason_description TEXT NOT NULL,\n        comission_reason_zone VARCHAR(255) NOT NULL,\n        comission_reason_municipality VARCHAR(255) NOT NULL,\n        comission_reason_state VARCHAR(255) NOT NULL\n    )\",\n    )\n    .execute(pool)\n    .await?;\n\n    sqlx::query(\n        \"CREATE TABLE IF NOT EXISTS comission_exit(\n        id SERIAL PRIMARY KEY,\n        comission_id INTEGER NOT NULL REFERENCES comissions(id),\n        comission_exit_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        comission_observations TEXT\n    )\",\n    )\n    .execute(pool)\n    .await?;","registerMode":1}]],["-",[{"text":" ","registerMode":0}]],[":",[{"text":{"commandList":["w"],"actionKeys":[],"waitingForAnotherActionKey":false,"actionsRun":[],"actionsRunPressedKeys":[],"bufferedKeys":[],"allowPotentialRemapOnFirstKey":true,"hasRunOperator":false,"isInsertion":false,"transformer":{"transformations":[]},"count":0,"operatorCount":0,"registerKey":"","registerName":":"},"registerMode":0}]],["*",[{"registerMode":1,"text":"    sqlx::query(\n        \"CREATE TABLE IF NOT EXISTS comissions(\n        id SERIAL PRIMARY KEY,\n        comission_entry_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        comission_exit_date TIMESTAMP,\n        comission_status_date TIMESTAMP,\n        comission_brigade VARCHAR(255) NOT NULL REFERENCES brigada(Nombre),\n        comission_observations TEXT,\n        comission_authorized_official_id INTEGER REFERENCES official(id),\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n    )\",\n    )\n    .execute(pool)\n    .await?;\n\n    sqlx::query(\n        \"\n    CREATE TABLE IF NOT EXISTS transport(\n        id SERIAL PRIMARY KEY,\n        transport_type VARCHAR(255) NOT NULL,\n        transport_details VARCHAR(255) NOT NULL,\n        transport_brand VARCHAR(255) NOT NULL,\n        transport_model VARCHAR(255) NOT NULL,\n        transport_plate VARCHAR(255) NOT NULL,\n        transport_unit VARCHAR(255) NOT NULL,\n        transport_status VARCHAR(255)\n    )\",\n    )\n    .execute(pool)\n    .await?;\n\n    sqlx::query(\n        \"\n    CREATE TABLE IF NOT EXISTS comission_transport(\n        id SERIAL PRIMARY KEY,\n        comission_id INTEGER NOT NULL REFERENCES comissions(id),\n        transport_id INTEGER NOT NULL REFERENCES transport(id)\n    )\",\n    )\n    .execute(pool)\n    .await?;\n\n    sqlx::query(\n        \"CREATE TABLE IF NOT EXISTS comission_officials(\n        id SERIAL PRIMARY KEY,\n        comission_id INTEGER NOT NULL REFERENCES comissions(id),\n        official_id INTEGER NOT NULL REFERENCES official(id),\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n    )\",\n    )\n    .execute(pool)\n    .await?;\n\n    sqlx::query(\n        \"CREATE TABLE IF NOT EXISTS comission_reasons(\n        id SERIAL PRIMARY KEY,\n        comission_id INTEGER NOT NULL REFERENCES comissions(id),\n        comission_reason_name VARCHAR(255) NOT NULL,\n        comission_reason_description TEXT NOT NULL,\n        comission_reason_zone VARCHAR(255) NOT NULL,\n        comission_reason_municipality VARCHAR(255) NOT NULL,\n        comission_reason_state VARCHAR(255) NOT NULL\n    )\",\n    )\n    .execute(pool)\n    .await?;\n\n    sqlx::query(\n        \"CREATE TABLE IF NOT EXISTS comission_exit(\n        id SERIAL PRIMARY KEY,\n        comission_id INTEGER NOT NULL REFERENCES comissions(id),\n        comission_exit_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        comission_observations TEXT\n    )\",\n    )\n    .execute(pool)\n    .await?;"}]]]}